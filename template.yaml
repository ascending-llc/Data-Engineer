AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 60
    Runtime: python3.7
    Layers:
      - !Ref Layer

Resources:
  SwitchClouderaInstances:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: SwitchInstances.switch_instances
      Role: !GetAtt LambdaRole.Arn
      Events:
        StartLabWeekDayEvent:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"on\"}"
            Schedule: cron(0 1 ? * TUE,WED,SAT *)
        StopLabWeekDayEvent:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"off\"}"
            Schedule: cron(0 3 ? * TUE,WED,SAT *)
        StartLabSatEvents:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"on\"}"
            Schedule: cron(0 19 ? * SAT *)
        StopLabSatEvents:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"off\"}"
            Schedule: cron(0 22 ? * SAT *)
        StartOnWedEvents:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"on\"}"
            Schedule: cron(0 0 ? * FRI *)
        StopOnWedEvents:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"off\"}"
            Schedule: cron(0 3 ? * FRI *)
        StartOnSunEvents:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"on\"}"
            Schedule: cron(30 19 ? * SUN *)
        StopOnSunEvents:
          Type: Schedule
          Properties:
            Input: "{ \"status\" : \"off\"}"
            Schedule: cron(30 22 ? * SUN *)
        

  # TurnOnClouderaInstances:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: lambda/
  #     Handler: SwitchInstances.turn_on_instances
  #     Role: !GetAtt LambdaRole.Arn
  #     Events:
  #       CronJobEvents:
  #         Type: Schedule
  #         Properties:


  # TurnOffClouderaInstances:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: lambda/
  #     Handler: SwitchInstances.turn_off_instances
  #     Role: !GetAtt LambdaRole.Arn

  CreateIamUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: CreateUser.create_aws_user
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        -
          PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action: 
                  - cloudwatch:*
                  - s3:*
                  - logs:*
                  - ssm:*
                  - dynamodb:*
                  - ec2:*
                  - iam:*
                Resource: "*"

  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: 's3://ascending-devops/layers/layer0714.zip'
      CompatibleRuntimes:
        - python3.7
      RetentionPolicy: Delete